package com.example.backend1kompis.controllers;

import com.example.backend1kompis.Kompis;
import com.example.backend1kompis.repositories.KompisRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@RestController                            // This means that this class is a Controller
@RequestMapping("/demo")               // This means URL's start with /demo (after Application path)
public class KompisController {
    // This means to get the bean called bookRepository
    @Autowired
    // Which is auto-generated by Spring, we will use it to handle the data
    private KompisRepository kompisRepository;

    @GetMapping( "/add")
    public String addNewUser(@RequestParam String name
            , @RequestParam String address) {
        // @RequestParam means it is a parameter from the GET or POST request

        Kompis k = new Kompis();
        k.setName(name);
        k.setAddress(address);
        kompisRepository.save(k);
        return "Saved";
    }

    //för att posta från kommandoraden: curl localhost:8080/demo/add -d title=First -d author=SomeGuy
    @PostMapping( "/add") // Map ONLY POST Requests
    public String addNewUserByPost(@RequestParam String name
            , @RequestParam String address) {
        // @RequestParam means it is a parameter from the GET or POST request

        Kompis k = new Kompis(name, address);
        kompisRepository.save(k);
        return "Saved";
    }


    @GetMapping("/all")
    public Iterable<Kompis> getAllUsers() {
        // This returns a JSON or XML with the books
        return kompisRepository.findAll();
    }

    @GetMapping( "/kompis")
    public Iterable<Kompis> getKompisByName(@RequestParam(required = false) String name,
                                         @RequestParam(required = false) String address) {
        // @RequestParam means it is a parameter from the GET or POST request
        if (name != null && address != null) {
            return kompisRepository.findByNameAndAddress(name, address);
        } else if (name != null) {
            return kompisRepository.findByName(name);
        } else if (address != null) {
            return kompisRepository.findByAddress(address);
        }
        return null;
    }


    @GetMapping( "/delete/{id}")
    public String deleteKompisById(@PathVariable long id) {
        // This returns a JSON or XML with the books
        kompisRepository.deleteById(id);
        return "Kompis was deleted";
    }

}